                            | #######################################################################
                            | # Test for copying block of size 63;
                            | #######################################################################
0x000:                      | 	.pos 0
0x000: 30f4a808000000000000 | main:	irmovq Stack, %rsp  	# Set up stack pointer
                            | 
                            | 	# Set up arguments for copy function and then invoke it
0x00a: 30f23f00000000000000 | 	irmovq $63, %rdx		# src and dst have 63 elements
0x014: 30f62806000000000000 | 	irmovq dest, %rsi	# dst array
0x01e: 30f71804000000000000 | 	irmovq src, %rdi	# src array
0x028: 803200000000000000   | 	call ncopy		 
0x031: 00                   | 	halt			# should halt with num nonzeros in %rax
0x032:                      | StartFun:
                            | # Kadir CETINKAYA e2036457
                            | #/* $begin ncopy-ys */
                            | ##################################################################
                            | # ncopy.ys - Copy a src block of len words to dst.
                            | # Return the number of positive words (>0) contained in src.
                            | #
                            | # Include your name and ID here.
                            | #
                            | # Describe how and why you modified the baseline code.
                            | # 
                            | # I first implemented loop unrolling with a factor of 10 and handled the remanings
                            | # with a jump table. For the jump table I used decremental access since I check by
                            | # subtracting from size, that way I saved another addition. Also since every address
                            | # is a quad, 8 bytes, the size should be multiplied by 8 I achived it by performing
                            | # 3 additions, each multplies size by 2. Also performed at least one operation after
                            | # a mrmov to make sure the result is ready for next operation to be peformed, that way
                            | # no bubble will be inserted into the pipe.
                            | #
                            | ##################################################################
                            | # Do not modify this portion
                            | # Function prologue.
                            | # %rdi = src, %rsi = dst, %rdx = len
0x032:                      | ncopy:
                            | #	xorq %rax, %rax # zero out the result
0x032: c0f2f7ffffffffffffff | 	iaddq $-9, %rdx # subtract 8 from size
                            | 	#jg lin_loop # if still positive size is at least 9, take the loop
0x03c: 710602000000000000   | 	jle calc_offset
                            | 	#jmp lin_loop
                            | 
0x045:                      | lin_loop: #size>9
0x045: 50870000000000000000 | 	mrmovq (%rdi), %r8 # read first quad from src
0x04f: 50970800000000000000 | 	mrmovq 8(%rdi), %r9 # read second quad from src
0x059: 50a71000000000000000 | 	mrmovq 16(%rdi), %r10 # third
0x063: 50b71800000000000000 | 	mrmovq 24(%rdi), %r11 # and forth
0x06d: 6288                 | 	andq %r8, %r8 # check whether first word is positive
0x06f: 718200000000000000   | 	jle n11 # if not do not perform addition
0x078: c0f00100000000000000 | 	iaddq $1, %rax # if positive increment rax
0x082:                      | n11:
0x082: 40960800000000000000 | 	rmmovq %r9, 8(%rsi) # mov second quad from src to dest
0x08c: 40860000000000000000 | 	rmmovq %r8, (%rsi) # mov first quad from src to dest
0x096: 6299                 | 	andq %r9, %r9 # check for second word, same as above
0x098: 71ab00000000000000   | 	jle n21
0x0a1: c0f00100000000000000 | 	iaddq $1, %rax
0x0ab:                      | n21:
0x0ab: 40a61000000000000000 | 	rmmovq %r10, 16(%rsi) # move from src to dest
0x0b5: 40b61800000000000000 | 	rmmovq %r11, 24(%rsi) # same as before
0x0bf: 50872000000000000000 | 	mrmovq 32(%rdi), %r8 # read 5th quad from src
0x0c9: 50972800000000000000 | 	mrmovq 40(%rdi), %r9 # read 6th quad from src
0x0d3: 62aa                 | 	andq %r10, %r10 
0x0d5: 71e800000000000000   | 	jle n12
0x0de: c0f00100000000000000 | 	iaddq $1, %rax
0x0e8:                      | n12:
0x0e8: 62bb                 | 	andq %r11, %r11
0x0ea: 71fd00000000000000   | 	jle n22
0x0f3: c0f00100000000000000 | 	iaddq $1, %rax
0x0fd:                      | n22:
0x0fd: 6288                 | 	andq %r8, %r8 # perform same checks
0x0ff: 711201000000000000   | 	jle n13
0x108: c0f00100000000000000 | 	iaddq $1, %rax
0x112:                      | n13:
0x112: 40862000000000000000 | 	rmmovq %r8, 32(%rsi)
0x11c: 40962800000000000000 | 	rmmovq %r9, 40(%rsi)
0x126: 50a73000000000000000 | 	mrmovq 48(%rdi), %r10
0x130: 50b73800000000000000 | 	mrmovq 56(%rdi), %r11
0x13a: 6299                 | 	andq %r9, %r9
0x13c: 714f01000000000000   | 	jle n23
0x145: c0f00100000000000000 | 	iaddq $1, %rax
0x14f:                      | n23:
0x14f: 62aa                 | 	andq %r10, %r10
0x151: 50874000000000000000 | 	mrmovq 64(%rdi), %r8
0x15b: 50974800000000000000 | 	mrmovq 72(%rdi), %r9
0x165: 717801000000000000   | 	jle n14
0x16e: c0f00100000000000000 | 	iaddq $1, %rax
0x178:                      | n14:
0x178: 40a63000000000000000 | 	rmmovq %r10, 48(%rsi)
0x182: 40b63800000000000000 | 	rmmovq %r11, 56(%rsi)
0x18c: 40864000000000000000 | 	rmmovq %r8, 64(%rsi)
0x196: 40964800000000000000 | 	rmmovq %r9, 72(%rsi)
0x1a0: 62bb                 | 	andq %r11, %r11
0x1a2: 71b501000000000000   | 	jle n24
0x1ab: c0f00100000000000000 | 	iaddq $1, %rax
0x1b5:                      | n24:
0x1b5: 6288                 | 	andq %r8, %r8
0x1b7: 71ca01000000000000   | 	jle n15
0x1c0: c0f00100000000000000 | 	iaddq $1, %rax
0x1ca:                      | n15:
0x1ca: 6299                 | 	andq %r9, %r9
0x1cc: 71df01000000000000   | 	jle done
0x1d5: c0f00100000000000000 | 	iaddq $1, %rax
                            | 
0x1df:                      | done:
0x1df: c0f75000000000000000 | 	iaddq $80, %rdi # increment src by 80=8*10, 10 quad
0x1e9: c0f65000000000000000 | 	iaddq $80, %rsi # increment dst by 80=8*10, 10 quad
0x1f3: c0f2f6ffffffffffffff | 	iaddq $-10, %rdx # decrement size by 10
0x1fd:                      | lin_test:
0x1fd: 764500000000000000   | 	jg lin_loop # check whether size is still positive
                            | 
0x206:                      | calc_offset: # jump to remainder handling
0x206: 6022                 | 	addq %rdx, %rdx # rdx = 2*rdx
0x208: 6022                 | 	addq %rdx, %rdx # rdx = 2*rdx
0x20a: 6022                 | 	addq %rdx, %rdx # rdx = 2*rdx
0x20c: 50227502000000000000 | 	mrmovq JTableEnd(%rdx), %rdx # rdx = *(JTableEnd - 8*(size%9))
0x216: 50870000000000000000 | 	mrmovq (%rdi), %r8 # read first byte, even if size is zero, since read is an innocent operation
0x220: 50970800000000000000 | 	mrmovq 8(%rdi), %r9
0x22a: a02f                 | 	pushq %rdx # push the jump address
0x22c: 90                   | 	ret # jump to it
                            | 
                            | #.align 8
0x22d: 1604000000000000     | 	.quad Done
0x235: f703000000000000     | 	.quad x1m
0x23d: d803000000000000     | 	.quad x2m
0x245: af03000000000000     | 	.quad x3m
0x24d: 7c03000000000000     | 	.quad x4m
0x255: 4903000000000000     | 	.quad x5m
0x25d: 1603000000000000     | 	.quad x6m
0x265: e302000000000000     | 	.quad x7m
0x26d: b002000000000000     | 	.quad x8m
0x275:                      | JTableEnd:
0x275: 7d02000000000000     | 	.quad x9m
                            | 
0x27d:                      | x9m: # remainder cases
0x27d: 50b74000000000000000 | 	mrmovq 64(%rdi), %r11 # does the same as the loop
0x287: 50a73800000000000000 | 	mrmovq 56(%rdi), %r10 # only difference is also loads memory
0x291: 40b64000000000000000 | 	rmmovq %r11, 64(%rsi) # going to be transffered for the next block
0x29b: 62bb                 | 	andq %r11, %r11 # to a register also and skip the movement in that step
0x29d: 71ba02000000000000   | 	jle x8m_f
0x2a6: c0f00100000000000000 | 	iaddq $1, %rax
0x2b0:                      | x8m: # remainder cases
0x2b0: 50a73800000000000000 | 	mrmovq 56(%rdi), %r10 # does the same as the loop
0x2ba:                      | x8m_f:
0x2ba: 50b73000000000000000 | 	mrmovq 48(%rdi), %r11 # only difference is also loads memory
0x2c4: 40a63800000000000000 | 	rmmovq %r10, 56(%rsi) # going to be transffered for the next block
0x2ce: 62aa                 | 	andq %r10, %r10 # to a register also and skip the movement in that step
0x2d0: 71ed02000000000000   | 	jle x7m_f
0x2d9: c0f00100000000000000 | 	iaddq $1, %rax
0x2e3:                      | x7m:
0x2e3: 50b73000000000000000 | 	mrmovq 48(%rdi), %r11
0x2ed:                      | x7m_f:
0x2ed: 50a72800000000000000 | 	mrmovq 40(%rdi), %r10
0x2f7: 40b63000000000000000 | 	rmmovq %r11, 48(%rsi)
0x301: 62bb                 | 	andq %r11, %r11
0x303: 712003000000000000   | 	jle x6m_f
0x30c: c0f00100000000000000 | 	iaddq $1, %rax
                            | 
0x316:                      | x6m:
0x316: 50a72800000000000000 | 	mrmovq 40(%rdi), %r10
0x320:                      | x6m_f:
0x320: 50b72000000000000000 | 	mrmovq 32(%rdi), %r11
0x32a: 40a62800000000000000 | 	rmmovq %r10, 40(%rsi)
0x334: 62aa                 | 	andq %r10, %r10
0x336: 715303000000000000   | 	jle x5m_f
0x33f: c0f00100000000000000 | 	iaddq $1, %rax
                            | 
0x349:                      | x5m:
0x349: 50b72000000000000000 | 	mrmovq 32(%rdi), %r11
0x353:                      | x5m_f:
0x353: 50a71800000000000000 | 	mrmovq 24(%rdi), %r10
0x35d: 40b62000000000000000 | 	rmmovq %r11, 32(%rsi)
0x367: 62bb                 | 	andq %r11, %r11
0x369: 718603000000000000   | 	jle x4m_f
0x372: c0f00100000000000000 | 	iaddq $1, %rax
                            | 
0x37c:                      | x4m:
0x37c: 50a71800000000000000 | 	mrmovq 24(%rdi), %r10
0x386:                      | x4m_f:
0x386: 50b71000000000000000 | 	mrmovq 16(%rdi), %r11
0x390: 40a61800000000000000 | 	rmmovq %r10, 24(%rsi)
0x39a: 62aa                 | 	andq %r10, %r10
0x39c: 71b903000000000000   | 	jle x3m_f
0x3a5: c0f00100000000000000 | 	iaddq $1, %rax
                            | 
0x3af:                      | x3m:
0x3af: 50b71000000000000000 | 	mrmovq 16(%rdi), %r11
0x3b9:                      | x3m_f:
                            | #	rmmovq %r9, 8(%rsi)
                            | 	#mrmovq 8(%rdi), %r9
0x3b9: 40b61000000000000000 | 	rmmovq %r11, 16(%rsi)
0x3c3: 62bb                 | 	andq %r11, %r11
0x3c5: 71d803000000000000   | 	jle x2m_f
0x3ce: c0f00100000000000000 | 	iaddq $1, %rax
                            | 
0x3d8:                      | x2m:
                            | #	mrmovq 8(%rdi), %r9
0x3d8:                      | x2m_f:
0x3d8: 40960800000000000000 | 	rmmovq %r9, 8(%rsi)
0x3e2: 6299                 | 	andq %r9, %r9
0x3e4: 71f703000000000000   | 	jle x1m
0x3ed: c0f00100000000000000 | 	iaddq $1, %rax
                            | 
0x3f7:                      | x1m:
0x3f7: 40860000000000000000 | 	rmmovq %r8, (%rsi)
0x401: 6288                 | 	andq %r8, %r8
0x403: 711604000000000000   | 	jle Done
0x40c: c0f00100000000000000 | 	iaddq $1, %rax
                            | 
                            | ##################################################################
                            | # Do not modify the following section of code
                            | # Function epilogue.
0x416:                      | Done:
0x416: 90                   | 	ret
                            | ##################################################################
                            | # Keep the following label at the end of your function
0x417:                      | End:
                            | #/* $end ncopy-ys */
0x417:                      | EndFun:
                            | 
                            | ###############################
                            | # Source and destination blocks 
                            | ###############################
0x418:                      | 	.align 8
0x418:                      | src:
0x418: ffffffffffffffff     | 	.quad -1
0x420: 0200000000000000     | 	.quad 2
0x428: fdffffffffffffff     | 	.quad -3
0x430: 0400000000000000     | 	.quad 4
0x438: 0500000000000000     | 	.quad 5
0x440: 0600000000000000     | 	.quad 6
0x448: f9ffffffffffffff     | 	.quad -7
0x450: 0800000000000000     | 	.quad 8
0x458: f7ffffffffffffff     | 	.quad -9
0x460: 0a00000000000000     | 	.quad 10
0x468: f5ffffffffffffff     | 	.quad -11
0x470: f4ffffffffffffff     | 	.quad -12
0x478: f3ffffffffffffff     | 	.quad -13
0x480: 0e00000000000000     | 	.quad 14
0x488: f1ffffffffffffff     | 	.quad -15
0x490: f0ffffffffffffff     | 	.quad -16
0x498: 1100000000000000     | 	.quad 17
0x4a0: eeffffffffffffff     | 	.quad -18
0x4a8: 1300000000000000     | 	.quad 19
0x4b0: ecffffffffffffff     | 	.quad -20
0x4b8: ebffffffffffffff     | 	.quad -21
0x4c0: 1600000000000000     | 	.quad 22
0x4c8: 1700000000000000     | 	.quad 23
0x4d0: e8ffffffffffffff     | 	.quad -24
0x4d8: 1900000000000000     | 	.quad 25
0x4e0: e6ffffffffffffff     | 	.quad -26
0x4e8: 1b00000000000000     | 	.quad 27
0x4f0: 1c00000000000000     | 	.quad 28
0x4f8: e3ffffffffffffff     | 	.quad -29
0x500: 1e00000000000000     | 	.quad 30
0x508: e1ffffffffffffff     | 	.quad -31
0x510: 2000000000000000     | 	.quad 32
0x518: 2100000000000000     | 	.quad 33
0x520: 2200000000000000     | 	.quad 34
0x528: ddffffffffffffff     | 	.quad -35
0x530: dcffffffffffffff     | 	.quad -36
0x538: 2500000000000000     | 	.quad 37
0x540: 2600000000000000     | 	.quad 38
0x548: 2700000000000000     | 	.quad 39
0x550: d8ffffffffffffff     | 	.quad -40
0x558: d7ffffffffffffff     | 	.quad -41
0x560: d6ffffffffffffff     | 	.quad -42
0x568: 2b00000000000000     | 	.quad 43
0x570: 2c00000000000000     | 	.quad 44
0x578: d3ffffffffffffff     | 	.quad -45
0x580: d2ffffffffffffff     | 	.quad -46
0x588: 2f00000000000000     | 	.quad 47
0x590: 3000000000000000     | 	.quad 48
0x598: 3100000000000000     | 	.quad 49
0x5a0: 3200000000000000     | 	.quad 50
0x5a8: 3300000000000000     | 	.quad 51
0x5b0: ccffffffffffffff     | 	.quad -52
0x5b8: cbffffffffffffff     | 	.quad -53
0x5c0: caffffffffffffff     | 	.quad -54
0x5c8: c9ffffffffffffff     | 	.quad -55
0x5d0: 3800000000000000     | 	.quad 56
0x5d8: 3900000000000000     | 	.quad 57
0x5e0: c6ffffffffffffff     | 	.quad -58
0x5e8: 3b00000000000000     | 	.quad 59
0x5f0: c4ffffffffffffff     | 	.quad -60
0x5f8: c3ffffffffffffff     | 	.quad -61
0x600: c2ffffffffffffff     | 	.quad -62
0x608: c1ffffffffffffff     | 	.quad -63
0x610: fadebc0000000000     | 	.quad 0xbcdefa # This shouldn't get moved
                            | 
0x620:                      | 	.align 16
0x620:                      | Predest:
0x620: fadebc0000000000     | 	.quad 0xbcdefa
0x628:                      | dest:
0x628: abefcd0000000000     | 	.quad 0xcdefab
0x630: abefcd0000000000     | 	.quad 0xcdefab
0x638: abefcd0000000000     | 	.quad 0xcdefab
0x640: abefcd0000000000     | 	.quad 0xcdefab
0x648: abefcd0000000000     | 	.quad 0xcdefab
0x650: abefcd0000000000     | 	.quad 0xcdefab
0x658: abefcd0000000000     | 	.quad 0xcdefab
0x660: abefcd0000000000     | 	.quad 0xcdefab
0x668: abefcd0000000000     | 	.quad 0xcdefab
0x670: abefcd0000000000     | 	.quad 0xcdefab
0x678: abefcd0000000000     | 	.quad 0xcdefab
0x680: abefcd0000000000     | 	.quad 0xcdefab
0x688: abefcd0000000000     | 	.quad 0xcdefab
0x690: abefcd0000000000     | 	.quad 0xcdefab
0x698: abefcd0000000000     | 	.quad 0xcdefab
0x6a0: abefcd0000000000     | 	.quad 0xcdefab
0x6a8: abefcd0000000000     | 	.quad 0xcdefab
0x6b0: abefcd0000000000     | 	.quad 0xcdefab
0x6b8: abefcd0000000000     | 	.quad 0xcdefab
0x6c0: abefcd0000000000     | 	.quad 0xcdefab
0x6c8: abefcd0000000000     | 	.quad 0xcdefab
0x6d0: abefcd0000000000     | 	.quad 0xcdefab
0x6d8: abefcd0000000000     | 	.quad 0xcdefab
0x6e0: abefcd0000000000     | 	.quad 0xcdefab
0x6e8: abefcd0000000000     | 	.quad 0xcdefab
0x6f0: abefcd0000000000     | 	.quad 0xcdefab
0x6f8: abefcd0000000000     | 	.quad 0xcdefab
0x700: abefcd0000000000     | 	.quad 0xcdefab
0x708: abefcd0000000000     | 	.quad 0xcdefab
0x710: abefcd0000000000     | 	.quad 0xcdefab
0x718: abefcd0000000000     | 	.quad 0xcdefab
0x720: abefcd0000000000     | 	.quad 0xcdefab
0x728: abefcd0000000000     | 	.quad 0xcdefab
0x730: abefcd0000000000     | 	.quad 0xcdefab
0x738: abefcd0000000000     | 	.quad 0xcdefab
0x740: abefcd0000000000     | 	.quad 0xcdefab
0x748: abefcd0000000000     | 	.quad 0xcdefab
0x750: abefcd0000000000     | 	.quad 0xcdefab
0x758: abefcd0000000000     | 	.quad 0xcdefab
0x760: abefcd0000000000     | 	.quad 0xcdefab
0x768: abefcd0000000000     | 	.quad 0xcdefab
0x770: abefcd0000000000     | 	.quad 0xcdefab
0x778: abefcd0000000000     | 	.quad 0xcdefab
0x780: abefcd0000000000     | 	.quad 0xcdefab
0x788: abefcd0000000000     | 	.quad 0xcdefab
0x790: abefcd0000000000     | 	.quad 0xcdefab
0x798: abefcd0000000000     | 	.quad 0xcdefab
0x7a0: abefcd0000000000     | 	.quad 0xcdefab
0x7a8: abefcd0000000000     | 	.quad 0xcdefab
0x7b0: abefcd0000000000     | 	.quad 0xcdefab
0x7b8: abefcd0000000000     | 	.quad 0xcdefab
0x7c0: abefcd0000000000     | 	.quad 0xcdefab
0x7c8: abefcd0000000000     | 	.quad 0xcdefab
0x7d0: abefcd0000000000     | 	.quad 0xcdefab
0x7d8: abefcd0000000000     | 	.quad 0xcdefab
0x7e0: abefcd0000000000     | 	.quad 0xcdefab
0x7e8: abefcd0000000000     | 	.quad 0xcdefab
0x7f0: abefcd0000000000     | 	.quad 0xcdefab
0x7f8: abefcd0000000000     | 	.quad 0xcdefab
0x800: abefcd0000000000     | 	.quad 0xcdefab
0x808: abefcd0000000000     | 	.quad 0xcdefab
0x810: abefcd0000000000     | 	.quad 0xcdefab
0x818: abefcd0000000000     | 	.quad 0xcdefab
0x820:                      | Postdest:
0x820: bcfade0000000000     | 	.quad 0xdefabc
                            | 
0x828:                      | .align 8
                            | # Run time stack
0x828: 0000000000000000     | 	.quad 0
0x830: 0000000000000000     | 	.quad 0
0x838: 0000000000000000     | 	.quad 0
0x840: 0000000000000000     | 	.quad 0
0x848: 0000000000000000     | 	.quad 0
0x850: 0000000000000000     | 	.quad 0
0x858: 0000000000000000     | 	.quad 0
0x860: 0000000000000000     | 	.quad 0
0x868: 0000000000000000     | 	.quad 0
0x870: 0000000000000000     | 	.quad 0
0x878: 0000000000000000     | 	.quad 0
0x880: 0000000000000000     | 	.quad 0
0x888: 0000000000000000     | 	.quad 0
0x890: 0000000000000000     | 	.quad 0
0x898: 0000000000000000     | 	.quad 0
0x8a0: 0000000000000000     | 	.quad 0
                            | 
0x8a8:                      | Stack:
