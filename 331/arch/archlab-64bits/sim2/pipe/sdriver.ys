#######################################################################
# Test for copying block of size 4;
#######################################################################
	.pos 0
main:	irmovq Stack, %rsp  	# Set up stack pointer

	# Set up arguments for copy function and then invoke it
	irmovq $4, %rdx		# src and dst have 4 elements
	irmovq dest, %rsi	# dst array
	irmovq src, %rdi	# src array
	call ncopy		 
	halt			# should halt with num nonzeros in %rax
StartFun:
# Kadir CETINKAYA e2036457
#/* $begin ncopy-ys */
##################################################################
# ncopy.ys - Copy a src block of len words to dst.
# Return the number of positive words (>0) contained in src.
#
# Include your name and ID here.
#
# Describe how and why you modified the baseline code.
# 
# I first implemented loop unrolling with a factor of 10 and handled the remanings
# with a jump table. For the jump table I used decremental access since I check by
# subtracting from size, that way I saved another addition. Also since every address
# is a quad, 8 bytes, the size should be multiplied by 8 I achived it by performing
# 3 additions, each multplies size by 2. Also performed at least one operation after
# a mrmov to make sure the result is ready for next operation to be peformed, that way
# no bubble will be inserted into the pipe.
#
##################################################################
# Do not modify this portion
# Function prologue.
# %rdi = src, %rsi = dst, %rdx = len
ncopy:
#	xorq %rax, %rax # zero out the result
	iaddq $-9, %rdx # subtract 8 from size
	#jg lin_loop # if still positive size is at least 9, take the loop
	jle calc_offset
	#jmp lin_loop

lin_loop: #size>9
	mrmovq (%rdi), %r8 # read first quad from src
	mrmovq 8(%rdi), %r9 # read second quad from src
	mrmovq 16(%rdi), %r10 # third
	mrmovq 24(%rdi), %r11 # and forth
	andq %r8, %r8 # check whether first word is positive
	jle n11 # if not do not perform addition
	iaddq $1, %rax # if positive increment rax
n11:
	rmmovq %r9, 8(%rsi) # mov second quad from src to dest
	rmmovq %r8, (%rsi) # mov first quad from src to dest
	andq %r9, %r9 # check for second word, same as above
	jle n21
	iaddq $1, %rax
n21:
	rmmovq %r10, 16(%rsi) # move from src to dest
	rmmovq %r11, 24(%rsi) # same as before
	mrmovq 32(%rdi), %r8 # read 5th quad from src
	mrmovq 40(%rdi), %r9 # read 6th quad from src
	andq %r10, %r10 
	jle n12
	iaddq $1, %rax
n12:
	andq %r11, %r11
	jle n22
	iaddq $1, %rax
n22:
	andq %r8, %r8 # perform same checks
	jle n13
	iaddq $1, %rax
n13:
	rmmovq %r8, 32(%rsi)
	rmmovq %r9, 40(%rsi)
	mrmovq 48(%rdi), %r10
	mrmovq 56(%rdi), %r11
	andq %r9, %r9
	jle n23
	iaddq $1, %rax
n23:
	andq %r10, %r10
	mrmovq 64(%rdi), %r8
	mrmovq 72(%rdi), %r9
	jle n14
	iaddq $1, %rax
n14:
	rmmovq %r10, 48(%rsi)
	rmmovq %r11, 56(%rsi)
	rmmovq %r8, 64(%rsi)
	rmmovq %r9, 72(%rsi)
	andq %r11, %r11
	jle n24
	iaddq $1, %rax
n24:
	andq %r8, %r8
	jle n15
	iaddq $1, %rax
n15:
	andq %r9, %r9
	jle done
	iaddq $1, %rax

done:
	iaddq $80, %rdi # increment src by 80=8*10, 10 quad
	iaddq $80, %rsi # increment dst by 80=8*10, 10 quad
	iaddq $-10, %rdx # decrement size by 10
lin_test:
	jg lin_loop # check whether size is still positive

calc_offset: # jump to remainder handling
	addq %rdx, %rdx # rdx = 2*rdx
	addq %rdx, %rdx # rdx = 2*rdx
	addq %rdx, %rdx # rdx = 2*rdx
	mrmovq JTableEnd(%rdx), %rdx # rdx = *(JTableEnd - 8*(size%9))
	mrmovq (%rdi), %r8 # read first byte, even if size is zero, since read is an innocent operation
	mrmovq 8(%rdi), %r9
	pushq %rdx # push the jump address
	ret # jump to it

#.align 8
	.quad Done
	.quad x1m
	.quad x2m
	.quad x3m
	.quad x4m
	.quad x5m
	.quad x6m
	.quad x7m
	.quad x8m
JTableEnd:
	.quad x9m

x9m: # remainder cases
	mrmovq 64(%rdi), %r11 # does the same as the loop
	mrmovq 56(%rdi), %r10 # only difference is also loads memory
	rmmovq %r11, 64(%rsi) # going to be transffered for the next block
	andq %r11, %r11 # to a register also and skip the movement in that step
	jle x8m_f
	iaddq $1, %rax
x8m: # remainder cases
	mrmovq 56(%rdi), %r10 # does the same as the loop
x8m_f:
	mrmovq 48(%rdi), %r11 # only difference is also loads memory
	rmmovq %r10, 56(%rsi) # going to be transffered for the next block
	andq %r10, %r10 # to a register also and skip the movement in that step
	jle x7m_f
	iaddq $1, %rax
x7m:
	mrmovq 48(%rdi), %r11
x7m_f:
	mrmovq 40(%rdi), %r10
	rmmovq %r11, 48(%rsi)
	andq %r11, %r11
	jle x6m_f
	iaddq $1, %rax

x6m:
	mrmovq 40(%rdi), %r10
x6m_f:
	mrmovq 32(%rdi), %r11
	rmmovq %r10, 40(%rsi)
	andq %r10, %r10
	jle x5m_f
	iaddq $1, %rax

x5m:
	mrmovq 32(%rdi), %r11
x5m_f:
	mrmovq 24(%rdi), %r10
	rmmovq %r11, 32(%rsi)
	andq %r11, %r11
	jle x4m_f
	iaddq $1, %rax

x4m:
	mrmovq 24(%rdi), %r10
x4m_f:
	mrmovq 16(%rdi), %r11
	rmmovq %r10, 24(%rsi)
	andq %r10, %r10
	jle x3m_f
	iaddq $1, %rax

x3m:
	mrmovq 16(%rdi), %r11
x3m_f:
#	rmmovq %r9, 8(%rsi)
	#mrmovq 8(%rdi), %r9
	rmmovq %r11, 16(%rsi)
	andq %r11, %r11
	jle x2m_f
	iaddq $1, %rax

x2m:
#	mrmovq 8(%rdi), %r9
x2m_f:
	rmmovq %r9, 8(%rsi)
	andq %r9, %r9
	jle x1m
	iaddq $1, %rax

x1m:
	rmmovq %r8, (%rsi)
	andq %r8, %r8
	jle Done
	iaddq $1, %rax

##################################################################
# Do not modify the following section of code
# Function epilogue.
Done:
	ret
##################################################################
# Keep the following label at the end of your function
End:
#/* $end ncopy-ys */
EndFun:

###############################
# Source and destination blocks 
###############################
	.align 8
src:
	.quad -1
	.quad -2
	.quad 3
	.quad 4
	.quad 0xbcdefa # This shouldn't get moved

	.align 16
Predest:
	.quad 0xbcdefa
dest:
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
Postdest:
	.quad 0xdefabc

.align 8
# Run time stack
	.quad 0
	.quad 0
	.quad 0
	.quad 0
	.quad 0
	.quad 0
	.quad 0
	.quad 0
	.quad 0
	.quad 0
	.quad 0
	.quad 0
	.quad 0
	.quad 0
	.quad 0
	.quad 0

Stack:
